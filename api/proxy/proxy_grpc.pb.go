// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/proxy.proto

package proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyServiceClient interface {
	ProxyStream(ctx context.Context, opts ...grpc.CallOption) (ProxyService_ProxyStreamClient, error)
}

type proxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyServiceClient(cc grpc.ClientConnInterface) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) ProxyStream(ctx context.Context, opts ...grpc.CallOption) (ProxyService_ProxyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[0], "/proxy.ProxyService/ProxyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyServiceProxyStreamClient{stream}
	return x, nil
}

type ProxyService_ProxyStreamClient interface {
	Send(*ProxyMessage) error
	Recv() (*ProxyMessage, error)
	grpc.ClientStream
}

type proxyServiceProxyStreamClient struct {
	grpc.ClientStream
}

func (x *proxyServiceProxyStreamClient) Send(m *ProxyMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyServiceProxyStreamClient) Recv() (*ProxyMessage, error) {
	m := new(ProxyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyServiceServer is the server API for ProxyService service.
// All implementations must embed UnimplementedProxyServiceServer
// for forward compatibility
type ProxyServiceServer interface {
	ProxyStream(ProxyService_ProxyStreamServer) error
	mustEmbedUnimplementedProxyServiceServer()
}

// UnimplementedProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServiceServer struct {
}

func (UnimplementedProxyServiceServer) ProxyStream(ProxyService_ProxyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProxyStream not implemented")
}
func (UnimplementedProxyServiceServer) mustEmbedUnimplementedProxyServiceServer() {}

// UnsafeProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServiceServer will
// result in compilation errors.
type UnsafeProxyServiceServer interface {
	mustEmbedUnimplementedProxyServiceServer()
}

func RegisterProxyServiceServer(s grpc.ServiceRegistrar, srv ProxyServiceServer) {
	s.RegisterService(&ProxyService_ServiceDesc, srv)
}

func _ProxyService_ProxyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServiceServer).ProxyStream(&proxyServiceProxyStreamServer{stream})
}

type ProxyService_ProxyStreamServer interface {
	Send(*ProxyMessage) error
	Recv() (*ProxyMessage, error)
	grpc.ServerStream
}

type proxyServiceProxyStreamServer struct {
	grpc.ServerStream
}

func (x *proxyServiceProxyStreamServer) Send(m *ProxyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyServiceProxyStreamServer) Recv() (*ProxyMessage, error) {
	m := new(ProxyMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyService_ServiceDesc is the grpc.ServiceDesc for ProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProxyStream",
			Handler:       _ProxyService_ProxyStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proxy.proto",
}
